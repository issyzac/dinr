sort(my_object)
table(my_object)
unique(my_object)
rev(my_object)
#Selecting Vector elements
#By Position
my_object[4]
my_object[3]
my_object[-2]
my_object[-2, -4, -6]
my_object[-2:4]
my_object[-2]
my_object[-5]
my_object[2:4]
my_object[c(1, 5)]
my_object[c(-1, -5)]
my_object[c(-1, -5, -7)]
my_object[c(-1, -3, -5, -7)]
my_object[c(-1, -3, -5, -7, -9)]
#By Value
my_object[x = 1]
#By Value
my_object[x = 3]
#By Value
my_object[x = 2]
library(dplyr)
# Creating Vectors
seq(2,3, by=0.5)
rep(1:2, times=5)
2:6
#Vector Functions
my_object <- rep(1:10)
sort(my_object)
table(my_object)
rev(my_object)
unique(my_object)
#Selecting Vector elements
#By Position
my_object[4]
my_object[-5] #All but 5
my_object[2:4]
my_object[c(-1, -3, -5, -7, -9)]
#By Value
my_object[x = 2]
#By Value
my_object[x = 5]
my_object[x < 3]
my_object[my_object < 3]
#By Value
my_object[my_object = 5]
my_object[my_object < 3]
my_object[my_object %in% c(1,5,7)]
#Named Vector
my_object['apple']
#Do something here
}
#Do something here
variable
#Do something here
print(variable)
#Do something here
print(i)
print(j)
for (i in 1:4){
#Do something here
j <- i+10
print(j)
}
#For loop
x <- 1:10
for (i in 1:4){
#Do something here
j <- i+10
print(j)
}
#For loop
x <- 1:10
for (i in x){
#Do something here
j <- i+10
print(j)
}
while(x < 6){
#Do Something
y <- x*200
print(y)
}
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
# library(swirl)
### OPTIOM ONE
## Load the library
install.packages('swirl')
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
### OPTION TWO
# library(swirl)
# install_course_url("https://courses.edx.org/asset-v1:MITx+14.75x+2T2019+type@asset+block@14_310x_Intro_to_R.zip")
# swirl()
library(swirl)
### OPTIOM ONE
## Load the library
install.packages('swirl')
### OPTIOM ONE
## Load the library
install.packages('swirl', dependencies = TRUE)
r --version
### OPTIOM ONE
## Load the library
install.packages('swirl')
library(swirl)
install.packages("swirl")
### OPTIOM ONE
## Load the library
## install.packages('swirl')
library(swirl)
ls()
rm(list = ls())
swirl()
play()
nxt()
bye()
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
### OPTIOM ONE
## Load the library
##install.packages('swirl')
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
swirl()
### OPTIOM ONE
## Load the library
##install.packages('swirl')
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("/home/issyzack/Development/R/course/14_310x_Intro_to_R.zip", multi=FALSE)
swirl()
install.packages("tidyverse")
m <- 6
n <- 94
x <- 0
k <- 0
prob <- dhyper(x, m, n, k)
while (prob > 0.1){
k <- k +1
prob <- dhyper(x, m, n, k)
}
k
#Preliminaries
#---------------------------------------------------------
rm(list = ls())
library("mvtnorm")
install.packages("mvtnorm")
library("mvtnorm")
real_theta <- 5
sample_size <- 100
number_simulations <- 100000
simulations1 <- matrix(runif(sample_size*___, max = real_theta), ##please change ___ to get the correct value
nrow = number_simulations)
simulations1 <- matrix(runif(sample_size*___, max = real_theta), nrow = number_simulations) ##please change ___ to get the correct value
simulations1 <- matrix(runif(sample_size*0, max = real_theta), nrow = number_simulations) ##please change ___ to get the correct value
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_median <- 2*apply(simulations1, 1, median) ##please change ___ to get the correct value
estimator_mean
estimator_median
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$XXX = p1$density
p1 <- hist(estimator_mean, breaks = 100)
estimator_mean <- 2*apply(simulations1, 1, mean)
p1 <- hist(estimator_mean, breaks = 100)
simulations1 <- matrix(runif(sample_size*100, max = real_theta), nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_mean
estimator_median <- 2*apply(simulations1, 1, median) ##please change ___ to get the correct value
estimator_median
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$XXX = p1$density
p2$counts = p2$counts
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
sample_size <- 1000
number_simulations <- 100000
simulations1 <- matrix(runif(sample_size*100, max = real_theta), nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_median <- 2*apply(simulations1, 1, median) ##please change ___ to get the correct value
setwd("~/Documents/DEDP/Data Science for Social Scientists/Dinr/7")
rm(list = ls())
library(tidyverse)
require(cowplot)
sc <- read_csv("steph_curry_shot_data.csv")
lj <- read_csv("lebron_james_shot_data.csv")
kd <- read_csv("kevin_durant_shot_data.csv")
# CDF comparing Shot distance for Shots made
sc_shot_made <- filter(sc, shot_made==1)
lj_shot_made <- filter(lj, shot_made==1)
kd_shot_made <- filter(kd, shot_made==1)
sc_distance_made<-sc_shot_made$shot_distance
lj_distance_made<-lj_shot_made$shot_distance
kd_distance_made<-kd_shot_made$shot_distance
ggplot(sc_shot_made, aes(shot_distance))+
stat_ecdf(data=sc_shot_made, aes(shot_distance), color="darkblue" )+
stat_ecdf(data=lj_shot_made, aes(shot_distance),  color="darkred" )+
stat_ecdf(data=kd_shot_made, aes(shot_distance),  color="purple" )+
xlab("Distance to basket for shot made, CDF")+
ylab("")
ggsave("Comparisonbetweenplayers.pdf")
threeplayers<-bind_rows(list( "Stephen Curry"=sc, "Lebron James"=lj, "Kevin Durrant"=kd) , .id="player")
threeplayers_shots_made <- filter(threeplayers, shot_made==1)
ggplot(three_players_shots_made, aes(shot_distance, colour=player))+
geom_freqpoly()
ggplot(three_players_shots_made, aes(shot_distance, colour=player, y=..density..))+
geom_freqpoly()
ggplot(three_players_shots_made, aes(shot_distance, colour=player))+
geom_density(kernel="gaussian")
ggplot(threeplayers_shots_made, aes(shot_distance, colour=player))+
stat_ecdf()+
xlab("Distance to basket for shot made, CDF")+
ylab("")
ggsave("Comparisonbetweenplayers_onedataset.pdf")
# The combined data set also allows to do a comparative boxplot
ggplot(threeplayers_shots_made)+
geom_boxplot(
mapping=aes(
x = reorder(player, shot_distance, FUN = median),
y = shot_distance
)
)+
coord_flip()+
xlab("")+
ylab("Boxplots of distance of shot made, by player")+
theme_minimal()
ggsave("boxplot.pdf")
# first, I extract the vectors
sc_distance_made<-sc_shot_made$shot_distance
lj_distance_made<-lj_shot_made$shot_distance
kd_distance_made<-kd_shot_made$shot_distance
# now I run the test
ks.test(sc_distance_made,lj_distance_made)
ks.test(sc_distance_made,kd_distance_made)
# is steve curry distribution a normal?
sc_mean<-mean(sc_distance_made)
sc_sd<-sd(sc_distance_made)
ks.test(sc_distance_made, "pnorm", mean=sc_mean, sd=sc_sd)
SC1 <- ggplot(sc, aes(distance_from_midline_feet,distance_from_baseline_feet))+
geom_bin2d()+
ylab("from baseline")
SC2 <- ggplot(sc, aes(distance_from_midline_feet,distance_from_baseline_feet))+
geom_density2d()+
ylab("from baseline")
plot_grid(SC1, SC2, ncol = 1)
ggsave("stevecurry2d.pdf")
sc <- read_csv("steph_curry_shot_data.csv")
lj <- read_csv("lebron_james_shot_data.csv")
kd <- read_csv("kevin_durant_shot_data.csv")
# CDF comparing Shot distance for Shots made
sc_shot_made <- filter(sc, shot_made==1)
lj_shot_made <- filter(lj, shot_made==1)
kd_shot_made <- filter(kd, shot_made==1)
sc_distance_made<-sc_shot_made$shot_distance
lj_distance_made<-lj_shot_made$shot_distance
kd_distance_made<-kd_shot_made$shot_distance
ggplot(sc_shot_made, aes(shot_distance))+
stat_ecdf(data=sc_shot_made, aes(shot_distance), color="darkblue" )+
stat_ecdf(data=lj_shot_made, aes(shot_distance),  color="darkred" )+
stat_ecdf(data=kd_shot_made, aes(shot_distance),  color="purple" )+
xlab("Distance to basket for shot made, CDF")+
ylab("")
threeplayers<-bind_rows(list( "Stephen Curry"=sc, "Lebron James"=lj, "Kevin Durrant"=kd) , .id="player")
threeplayers_shots_made <- filter(threeplayers, shot_made==1)
ggplot(three_players_shots_made, aes(shot_distance, colour=player))+
geom_freqpoly()
ggplot(three_players_shots_made, aes(shot_distance, colour=player))+
geom_freqpoly()
ggplot(three_players_shots_made, aes(shot_distance, colour=player, y=..density..))+
geom_freqpoly()
ggplot(three_players_shots_made, aes(shot_distance, colour=player))+
geom_density(kernel="gaussian")
ggplot(threeplayers_shots_made, aes(shot_distance, colour=player))+
stat_ecdf()+
xlab("Distance to basket for shot made, CDF")+
ylab("")
rm(list() = ls)
rm(list() = ls)
rm(list() => ls)
rm(list = ls())
# Preliminaries
#-------------------------------------------------
#install.packages('perm')
library(perm)
rm(list = ls())
setwd("~/Documents/DEDP/Data Science for Social Scientists/Dinr/7")
chooseMatrix(5,2)
chooseMatrix(4,2)
chooseMatrix(4,1)
chooseMatrix(4,3)
chooseMatrix(5,3)
chooseMatrix(4,4)
chooseMatrix(4,1)
chooseMatrix(4,2)
chooseMatrix(5,2)
chooseMatrix(3,4)
chooseMatrix(3,3)
chooseMatrix(3,2)
chooseMatrix(5,2)
chooseMatrix(4,2)
chooseMatrix(5,4)
chooseMatrix(5,3)
chooseMatrix(5,2.5)
chooseMatrix(6,3)
chooseMatrix(4,3)
chooseMatrix(8,4)
chooseMatrix(4,2)
chooseMatrix(4,1)
chooseMatrix(5,1)
chooseMatrix(6,1)
chooseMatrix(6,2)
chooseMatrix(3,2)
chooseMatrix(3, 1)
chooseMatrix(4, 1)
chooseMatrix(4, 2)
# Questions 1 - 4
#-------------------------------------------------
perms <- chooseMatrix(8,4)
View(perms)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%4
control_avg <- (1/4)*(1-perms)%*%4
treatment_avg <- (1/4)*perms%*%8
control_avg <- (1/4)*(1-perms)%*%8
test_statistic <- abs(treatment_avg-control_avg)
chooseMatrix(5, 2)
chooseMatrix(5, 3)
chooseMatrix(4, 3)
chooseMatrix(2, 3)
chooseMatrix(2, 1)
chooseMatrix(3, 1)
chooseMatrix(4, 1)
chooseMatrix(5, 1)
chooseMatrix(4, 2)
# Questions 1 - 4
#-------------------------------------------------
perms <- chooseMatrix(4,2)
View(perms)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%4
control_avg <- (1/4)*(1-perms)%*%4
# Questions 1 - 4
#-------------------------------------------------
perms <- chooseMatrix(8,4)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
larger_than_observed <- (test_statistic >= observed_test)
#numbers in which the statistic exceeds or is equal to the value in the observed date
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
View(df)
# Question 5 - 6
#-------------------------------------------------
simul_stat <- as.vector(NULL)
chooseMatrix(4, 2)
schools <- read.csv('teachers_final.csv')
View(schools)
set.seed(42); u1 <- runif(30)
set.seed(42); u2 <- runif(30) # the same because of identical RNG status:
stopifnot(identical(u1, u2))
# Question 5 - 6
#-------------------------------------------------
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
set.seed(1001)
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
View(schools)
sum(abs(actual_stat) >= simul_stat)/NROW(TRUE)
sum(abs(actual_stat) >= simul_stat)/NROW(100)
sum(abs(actual_stat) >= simul_stat)/NROW(simul_stat)
sum(abs(actual_stat) >= simul_stat)/NROW(actual_stat)
sum(abs(simul_stat) >= actual_stat)/NROW(TRUE)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
sum(abs(simul_stat) >= actual_stat)/NROW(actual_stat)
sum(abs(test_statistic) >= actual_stat)/NROW(simul_stat)
sum(abs(test_statistic) >= actual_stat)/NROW(simul_stat)
sum(abs(actual_stat) >= test_statistic)/NROW(simul_stat)
#Question 7 - 8
#---------------------------------------------------
#Printing the ATE
ate <- xxxx
sum(abs(actual_stat) >= test_statistic)/NROW(simul_stat)
#Question 7 - 8
#---------------------------------------------------
#Printing the ATE
ate <- xxxx
sum(abs(actual_stat) >= test_statistic)/NROW(simul_stat)
for(i in 1:300) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
sum(abs(actual_stat) >= test_statistic)/NROW(simul_stat)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
#Question 7 - 8
#---------------------------------------------------
#Printing the ATE
ate <- actual_stat
ate
control_mean <- sum(schools$control*schools$open)/sum(schools$control)
treatment_mean <- sum(schools$treatment*schools$open)/sum(schools$treatment)
s_c <- (1/(sum(schools$control)-1))*sum(((schools$open-control_mean)*schools$control)^2)
s_t <- (1/(sum(schools$treatment)-1))*sum(((schools$open-treatment_mean)*schools$treatment)^2)
Vneyman <- (s_c/sum(control_mean) + s_t/sum(treatment_mean))
print(sqrt(Vneyman))
Vneyman <- (s_c/sum(schools$control) + s_t/sum(schools$treatment))
print(sqrt(Vneyman))
print(actual_stat/sqrt(Vneyman))
print(actual_stat-1.96*sqrt(Vneyman))
print(actual_stat+1.96*sqrt(Vneyman))
ate
simul_stat
treatment_mean - control_mean
(treatment_mean - control_mean)^2
Vneyman
Vneyman
print(sqrt(Vneyman))
#Question 15
#---------------------------------------------------
attach(schools)
install.packages("np")
View(schools)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=bw.all, bandwidth.compute=FALSE)
# Preliminaries
#-------------------------------------------------
#install.packages('perm')
install.packages(np)
# Preliminaries
#-------------------------------------------------
#install.packages('perm')
install.packages("npreg")
library(npreg)
#Question 15
#---------------------------------------------------
attach(schools)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=bw.all, bandwidth.compute=FALSE)
library(npreg)
#Question 15
#---------------------------------------------------
attach(schools)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=bw.all, bandwidth.compute=FALSE)
plot(plot)
#Question 15
#---------------------------------------------------
install.packages("np")
library(np)
attach(schools)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=bw.all, bandwidth.compute=FALSE)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bandwidth.compute=FALSE)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=npregbw(), bandwidth.compute=FALSE)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=0.04, bandwidth.compute=FALSE)
plot(plot)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=0.001, bandwidth.compute=FALSE)
plot(plot)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=1, bandwidth.compute=FALSE)
plot(plot)
plot <-npreg(xdat=schools$open, ydat= schools$pctpostwritten, bws=20, bandwidth.compute=FALSE)
plot(plot)
