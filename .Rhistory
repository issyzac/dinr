2+2
rep(1, 100)
rep(1, 100)
rep(1, 100)
clear
exit
2+2
2+2
rep(1, 100)
my_object <- seq(from =0, to=50, by=2)
#View the object
my_object
# create an object
my_object <- seq(from =0, to=50, by=7)
# create an object
my_object <- seq(from =0, to=50, by=7)
#View the object
my_object
#plot the object
plot(my_object)
second_object <- 2+2
?mean
help.search('weighted sum')
help.search('weighted mean')
help.search('arithmetic')
clear
help.search('clear')
help.search('function')
help(package = 'dplyr')
help(package = 'dplyr')
str(my_object)
str(second_object)
class(my_object)
class(second_object)
class(clear)
clearPushBack()
class(dply)
str(dplyr)
install.packages('dplyr')
library(dplyr)
dplyr::select()
data("iris")
class(iris)
str(iris)
getwd
clear
c(2,4,6)
2:6
1:100
seq(2,3, by=0.5)
rep(1:2 times=5)
rep(1:2, times=5)
rep(1:100, each 100)
rep(1:100, each=100)
clearPushBack()
sort(my_object)
library(dplyr)
seq(2,3, by=0.5)
rep(1:2, times=5)
my_object <- rep(1:2, times=5)
sort(my_object)
table(my_object)
unique(my_object)
rev(my_object)
#Selecting Vector elements
#By Position
my_object[4]
my_object[3]
my_object[-2]
my_object[-2, -4, -6]
my_object[-2:4]
my_object[-2]
my_object[-5]
my_object[2:4]
my_object[c(1, 5)]
my_object[c(-1, -5)]
my_object[c(-1, -5, -7)]
my_object[c(-1, -3, -5, -7)]
my_object[c(-1, -3, -5, -7, -9)]
#By Value
my_object[x = 1]
#By Value
my_object[x = 3]
#By Value
my_object[x = 2]
library(dplyr)
# Creating Vectors
seq(2,3, by=0.5)
rep(1:2, times=5)
2:6
#Vector Functions
my_object <- rep(1:10)
sort(my_object)
table(my_object)
rev(my_object)
unique(my_object)
#Selecting Vector elements
#By Position
my_object[4]
my_object[-5] #All but 5
my_object[2:4]
my_object[c(-1, -3, -5, -7, -9)]
#By Value
my_object[x = 2]
#By Value
my_object[x = 5]
my_object[x < 3]
my_object[my_object < 3]
#By Value
my_object[my_object = 5]
my_object[my_object < 3]
my_object[my_object %in% c(1,5,7)]
#Named Vector
my_object['apple']
#Do something here
}
#Do something here
variable
#Do something here
print(variable)
#Do something here
print(i)
print(j)
for (i in 1:4){
#Do something here
j <- i+10
print(j)
}
#For loop
x <- 1:10
for (i in 1:4){
#Do something here
j <- i+10
print(j)
}
#For loop
x <- 1:10
for (i in x){
#Do something here
j <- i+10
print(j)
}
while(x < 6){
#Do Something
y <- x*200
print(y)
}
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
# library(swirl)
### OPTIOM ONE
## Load the library
install.packages('swirl')
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
### OPTION TWO
# library(swirl)
# install_course_url("https://courses.edx.org/asset-v1:MITx+14.75x+2T2019+type@asset+block@14_310x_Intro_to_R.zip")
# swirl()
library(swirl)
### OPTIOM ONE
## Load the library
install.packages('swirl')
### OPTIOM ONE
## Load the library
install.packages('swirl', dependencies = TRUE)
r --version
### OPTIOM ONE
## Load the library
install.packages('swirl')
library(swirl)
install.packages("swirl")
### OPTIOM ONE
## Load the library
## install.packages('swirl')
library(swirl)
ls()
rm(list = ls())
swirl()
play()
nxt()
bye()
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
### OPTIOM ONE
## Load the library
##install.packages('swirl')
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("14_310x_Intro_to_R.zip", multi=FALSE)
swirl()
### OPTIOM ONE
## Load the library
##install.packages('swirl')
library(swirl)
## install the course
## The file is in the same location as the source file
install_course_zip("/home/issyzack/Development/R/course/14_310x_Intro_to_R.zip", multi=FALSE)
swirl()
install.packages("tidyverse")
pnorm(0.75, 0, 1, lower.tail = TRUE)
qnorm(0.7733726, 0, 1, lower.tail = TRUE)
qnorm(2.1, lower.tail = TRUE)
qnorm(0.2, 500, 10.6, lower.tail = FALSE)
qnorm(0.8, 500, 10.6, lower.tail = FALSE)
setwd("~/Documents/DEDP/Data Science for Social Scientists/Dinr")
# Define a Vector
states = c("washington", "Massachussetts", "California")
# Sample with replacement
sample(x = states, size = 10, replace = TRUE)
# Sample without replacement
sample(x = states, size = 2, replace = FALSE)
# Sample without replacement
sample(x = states, size = 2, replace = FALSE)
# Sample without replacement
sample(x = states, size = 2, replace = FALSE)
#Sample from a (normal) distribution
rnorm(n=100)
plot(density(rnorm(n = 1000000)))
#Example 1 : Coin Tossing
coin <- c("Heads", "Tails")
toss <- c()
for (i in 1:100) {
toss[i] <- sample(x = coin, size = 1)
}
toss
table(toss)
# Example 2: Sample marital status, income ad state
marital <- c("Married", "Single")
income <- 1:4
results <- matrix(nrow = 100, ncol = 3, data = NA)
colnames(results) <- c("marital", "income", "state")
head(results)
for (1 in 1:100) {
results[i, 1] <- sample(marital, size = 1)
results[i, 2] <- sample(income, size = 1)
results[i, 3] <- sample(states, size = 1)
}
results[i, 1] <- sample(marital, size = 1)
results[i, 2] <- sample(income, size = 1)
results[i, 3] <- sample(states, size = 1)
for (1 in 1:100) {
results[i, 1] <- sample(marital, size = 1)
results[i, 2] <- sample(income, size = 1)
results[i, 3] <- sample(states, size = 1)
}
for (i in 1:100) {
results[i, 1] <- sample(marital, size = 1)
results[i, 2] <- sample(income, size = 1)
results[i, 3] <- sample(states, size = 1)
}
head(results)
tail(results)
#apply table() function for each column
apply(x = results, margin = 2, FUN = table)
#apply table() function for each column
apply(x = results, MARGIN = 2, FUN = table)
#apply table() function for each column
apply(X = results, MARGIN = 2, FUN = table)
#apply table() function for each column
apply(X = results, MARGIN = 5, FUN = table)
#apply table() function for each column
apply(X = results, MARGIN = 5, FUN = table)
#apply table() function for each column
apply(X = results, MARGIN = 1, FUN = table)
#apply table() function for each column
apply(X = results, MARGIN = 3, FUN = table)
#apply table() function for each column
apply(X = results, MARGIN = 2, FUN = table)
for (i in 1:100) {
results[i, 1] <- sample(marital, size = 1)
results[i, 2] <- sample(income, size = 1)
results[i, 3] <- sample(states, size = 1)
}
#apply table() function for each column
#Used for summarizing a large number of dataset
apply(X = results, MARGIN = 2, FUN = table)
